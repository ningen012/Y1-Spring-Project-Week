import cv2
import numpy as np
from picamera2 import Picamera2
import time
import RPi.GPIO as GPIO

# GPIO Setup
IN1 = 17  # Left Motor Forward
IN2 = 18  # Left Motor Backward
IN3 = 22  # Right Motor Forward
IN4 = 23  # Right Motor Backward
ENA = 24  # Enable for Left Motor
ENB = 25  # Enable for Right Motor

GPIO.setmode(GPIO.BCM)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)
GPIO.setup(ENA, GPIO.OUT)
GPIO.setup(ENB, GPIO.OUT)

# PWM Setup (Frequency: 1000 Hz, Speed: 50% Duty Cycle)
pwm_left = GPIO.PWM(ENA, 1000)
pwm_right = GPIO.PWM(ENB, 1000)
pwm_left.start(50)  # 50% speed
pwm_right.start(50)  # 50% speed

def set_speed(left_speed, right_speed):
    pwm_left.ChangeDutyCycle(left_speed)
    pwm_right.ChangeDutyCycle(right_speed)

def move_forward():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(50, 50)

def move_left():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)
    set_speed(50, 60)

def move_right():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(60, 50)

def stop():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(0, 0)

# Initialize Picamera2
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"size": (320, 240)})
picam2.configure(config)
picam2.start()

time.sleep(2)  # Allow camera to warm up

while True:
    # Capture frame from Picamera2
    frame = picam2.capture_array()
    
    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (7, 7), 0)
    
    # Define Region of Interest (bottom half of the frame)
    height, width = blurred.shape
    roi = blurred[height//2:, :]
    
    # Apply Otsu's thresholding to detect black line
    _, thresh = cv2.threshold(roi, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # Find contours of the line
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Filter out small contours
    contours = [c for c in contours if cv2.contourArea(c) > 500]
    
    if contours:
        # Find the largest contour (assuming it's the line)
        largest_contour = max(contours, key=cv2.contourArea)
        M = cv2.moments(largest_contour)

        if M["m00"] != 0:
            cx = int(M["m10"] / M["m00"])  # Get center X position
            cy = int(M["m01"] / M["m00"]) + height//2  # Adjust Y position based on ROI

            # Draw the detected line
            cv2.drawContours(frame, [largest_contour + np.array([[0, height//2]])], -1, (0, 255, 0), 2)
            cv2.circle(frame, (cx, cy), 5, (255, 0, 0), -1)  # Mark center of the line

            # Decision making for movement with larger tolerance
            if cx < 140:
                direction = "Move Left"
                move_left()
            elif cx > 180:
                direction = "Move Right"
                move_right()
            else:
                direction = "Move Straight"
                move_forward()

            cv2.putText(frame, direction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        else:
            stop()
    else:
        stop()

    # Show the processed frame
    cv2.imshow("Line Detection", frame)

    # Exit if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
stop()
pwm_left.stop()
pwm_right.stop()
cv2.destroyAllWindows()
GPIO.cleanup()
