import cv2 
import numpy as np
from picamera2 import Picamera2
import time
import os
import RPi.GPIO as GPIO

# GPIO Setup
IN1, IN2, IN3, IN4 = 17, 18, 22, 23  # Motor control pins
ENA, ENB = 24, 25  # Motor speed control

# GPIO Initialization
GPIO.setmode(GPIO.BCM)
GPIO.setup([IN1, IN2, IN3, IN4, ENA, ENB], GPIO.OUT)

# PWM Setup (Frequency: 1000 Hz, Speed: 50%)
pwm_left = GPIO.PWM(ENA, 1000)
pwm_right = GPIO.PWM(ENB, 1000)
pwm_left.start(50)
pwm_right.start(50)

# Motor Control Functions
def set_speed(left_speed, right_speed):
    pwm_left.ChangeDutyCycle(left_speed)
    pwm_right.ChangeDutyCycle(right_speed)

def move_forward():
    GPIO.output([IN1, IN3], GPIO.HIGH)
    GPIO.output([IN2, IN4], GPIO.LOW)
    set_speed(50, 50)

def move_left():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)
    set_speed(50, 60)

def move_right():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(60, 50)

def stop():
    GPIO.output([IN1, IN2, IN3, IN4], GPIO.LOW)
    set_speed(0, 0)

# Camera Setup
TEMPLATE_DIR = "/home/pi/templates/"
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"size": (320, 240)})
picam2.configure(config)
picam2.start()
time.sleep(2)

# ORB Detector for Complex Symbols
orb = cv2.ORB_create()
templates_orb = {}
for filename in os.listdir(TEMPLATE_DIR):
    path = os.path.join(TEMPLATE_DIR, filename)
    template = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
    if template is not None:
        keypoints, descriptors = orb.detectAndCompute(template, None)
        templates_orb[filename] = (template, keypoints, descriptors)

# Simple Symbol Templates
templates_simple = {}
simple_symbols = ["stop sign.png"]
for filename in simple_symbols:
    path = os.path.join(TEMPLATE_DIR, filename)
    template = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
    if template is not None:
        templates_simple[filename] = template

# BFMatcher for ORB
bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)

# Symbol Detection Functions
def detect_symbol_orb(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    keypoints, descriptors = orb.detectAndCompute(gray, None)
    
    if descriptors is None:
        return None
        
    best_match = None
    best_score = float('inf')
    
    for name, (template, tpl_kp, tpl_desc) in templates_orb.items():
        if tpl_desc is None:
            continue
        matches = bf.match(descriptors, tpl_desc)
        if len(matches) > 10:
            score = sum([m.distance for m in matches[:10]]) / 10
            if score < best_score:
                best_match = name
                best_score = score
    
    return (best_match, best_score) if best_match and best_score < 50 else (None, 0)

# Main Loop
try:
    symbol_detected = False
    last_detection_time = 0
    frame_count = 0  # Count frames for symbol detection timing
    
    while True:
        frame = picam2.capture_array()
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Detect symbols every 10 frames to avoid lag
        if not symbol_detected and frame_count % 10 == 0:
            complex_symbol = detect_symbol_orb(frame)
            
            if complex_symbol and complex_symbol[0] is not None:
                symbol_detected = True
                last_detection_time = time.time()
                stop()
                print(f"Symbol Detected: {complex_symbol[0]}")
                
                if complex_symbol[0] == "stop sign.png":
                    print("Stop sign detected! Waiting...")

        # If symbol was detected, wait for 3 seconds before resuming
        if symbol_detected and time.time() - last_detection_time > 3:
            symbol_detected = False
            print("Resuming line following")

        # Line Following Logic (only when no symbol is detected)
        if not symbol_detected:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            blurred = cv2.GaussianBlur(gray, (7, 7), 0)
            height, width = blurred.shape
            roi = blurred[height//2:, :]

            _, thresh = cv2.threshold(roi, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
            contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            contours = [c for c in contours if cv2.contourArea(c) > 500]

            if contours:
                largest_contour = max(contours, key=cv2.contourArea)
                M = cv2.moments(largest_contour)
                
                if M["m00"] != 0:
                    cx = int(M["m10"] / M["m00"])
                    
                    if cx < 140:
                        move_left()
                    elif cx > 180:
                        move_right()
                    else:
                        move_forward()
                else:
                    stop()
            else:
                stop()

        frame_count += 1
        cv2.imshow("Robot Vision", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("Program stopped by user")

finally:
    stop()
    pwm_left.stop()
    pwm_right.stop()
    cv2.destroyAllWindows()
    GPIO.cleanup()
    picam2.stop()
